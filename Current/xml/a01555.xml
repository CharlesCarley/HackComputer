<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="a01555" kind="class" language="C++" prot="public">
    <compoundname>Hack::Exception</compoundname>
    <basecompoundref prot="public" virt="non-virtual">exception</basecompoundref>
    <derivedcompoundref refid="a01575" prot="public" virt="non-virtual">Hack::ParseError</derivedcompoundref>
    <includes local="no">Source/Utils/Exception.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01555_1a11fa7b1943f43c7c019fa08a157c9b6f" prot="private" static="no" mutable="no">
        <type><ref refid="a00915_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Exception::_string</definition>
        <argsstring></argsstring>
        <name>_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Exception.h" line="35" column="1" bodyfile="Source/Utils/Exception.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01555_1abf07f31396bbcd6c6b006120d5d3e031" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Hack::Exception::Exception</definition>
        <argsstring>(const char *what)</argsstring>
        <name>Exception</name>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Exception.h" line="38" column="1" bodyfile="Source/Utils/Exception.h" bodystart="38" bodyend="43"/>
        <references refid="a01551_1a24edb98095550871d32879f324e39e19" compoundref="a00821" startline="228" endline="234">Hack::Console::debugBreak</references>
      </memberdef>
      <memberdef kind="function" id="a01555_1ab4bb8a7159681d4e6776cec5a935eda5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Hack::Exception::Exception</definition>
        <argsstring>(String what)</argsstring>
        <name>Exception</name>
        <param>
          <type><ref refid="a00915_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Exception.h" line="45" column="1" bodyfile="Source/Utils/Exception.h" bodystart="45" bodyend="50"/>
        <references refid="a01551_1a24edb98095550871d32879f324e39e19" compoundref="a00821" startline="228" endline="234">Hack::Console::debugBreak</references>
      </memberdef>
      <memberdef kind="function" id="a01555_1a8296ea42b1a1a21aa7cb4ea5bd5dc1af" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Hack::Exception::Exception</definition>
        <argsstring>(const String &amp;what, Args &amp;&amp;...args)</argsstring>
        <name>Exception</name>
        <param>
          <type>const <ref refid="a00915_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Exception.h" line="53" column="1" bodyfile="Source/Utils/Exception.h" bodystart="53" bodyend="62"/>
        <references refid="a01555_1ad552d982f58950c324eaebd2dfbd1fe2" compoundref="a00827" startline="64" endline="67">what</references>
        <references refid="a01551_1a24edb98095550871d32879f324e39e19" compoundref="a00821" startline="228" endline="234">Hack::Console::debugBreak</references>
      </memberdef>
      <memberdef kind="function" id="a01555_1ad552d982f58950c324eaebd2dfbd1fe2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Hack::Exception::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Exception.h" line="64" column="1" bodyfile="Source/Utils/Exception.h" bodystart="64" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="755">
        <label>std::exception</label>
      </node>
      <node id="756">
        <label>Hack::ParseError</label>
        <link refid="a01575"/>
        <childnode refid="754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="754">
        <label>Hack::Exception</label>
        <link refid="a01555"/>
        <childnode refid="755" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="758">
        <label>std::exception</label>
      </node>
      <node id="757">
        <label>Hack::Exception</label>
        <link refid="a01555"/>
        <childnode refid="758" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Source/Utils/Exception.h" line="33" column="1" bodyfile="Source/Utils/Exception.h" bodystart="32" bodyend="68"/>
    <listofallmembers>
      <member refid="a01555_1a11fa7b1943f43c7c019fa08a157c9b6f" prot="private" virt="non-virtual"><scope>Hack::Exception</scope><name>_string</name></member>
      <member refid="a01555_1abf07f31396bbcd6c6b006120d5d3e031" prot="public" virt="non-virtual"><scope>Hack::Exception</scope><name>Exception</name></member>
      <member refid="a01555_1ab4bb8a7159681d4e6776cec5a935eda5" prot="public" virt="non-virtual"><scope>Hack::Exception</scope><name>Exception</name></member>
      <member refid="a01555_1a8296ea42b1a1a21aa7cb4ea5bd5dc1af" prot="public" virt="non-virtual"><scope>Hack::Exception</scope><name>Exception</name></member>
      <member refid="a01555_1ad552d982f58950c324eaebd2dfbd1fe2" prot="public" virt="non-virtual"><scope>Hack::Exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
